/*
 * poj 1094
 * guzhoudiaoke@126.com
 * 2011-09-18
 */

#include <stdio.h>
#include <string.h>

int n, m;
int relation[26][26];
int indegree[26];
int topological_sequence[26];

int check_indegree_0()
{
	int i, re = 0;
	for (i = 0; i < n; i++)
		if (indegree[i] == 0)
			re++;
	return re;
}

int topological_sort()
{
	int i, pos, count, cur_index, num_indegree_0, stack[26];
	cur_index = 0;

	num_indegree_0 = check_indegree_0();
	if (num_indegree_0 != 1)
		return 0;
	
	
	count = 0;
	while (num_indegree_0 == 1)
	{

		for (pos = 0; pos < n; pos++)
			if (indegree[pos] == 0)
				break;
		topological_sequence[count++] = pos;
		for (i = 0; i < n; i++)
			if (relation[pos][i])
				indegree[i]--;
		indegree[pos] = -1;
		num_indegree_0 = check_indegree_0();
	}
	
	return count;
}

int main()
{
	int i, cycle, num_indegree_0, count, sorted;
	char ch_first, ch_operate, ch_second;
	while (1)
	{
		scanf("%d%d", &n, &m);
		getchar();
		if (n == 0 && m == 0)
			break;
		
		cycle = 0;
		sorted = 0;
		memset(indegree, 0, sizeof(indegree));
		memset(relation, 0, sizeof(relation));

		for (i = 0; i < m; i++)
		{
			scanf("%c%c%c", &ch_first, &ch_operate, &ch_second);
			getchar();

			if (cycle || sorted)
				continue;
				
			indegree[ch_second-'A']++;
			relation[ch_first-'A'][ch_second-'A'] = 1;
			
			num_indegree_0 = check_indegree_0();
			if (num_indegree_0 == 0)
				cycle = 1;
			else if (num_indegree_0 == 1)
			{
				count = topological_sort();
				if (count == n)
					sorted = 1;
			}
		}

		if (cycle)
			printf("Sorted sequence cannot be determined.\n");
		else if (sorted)
		{
			printf("Sorted sequence determined after %d relations: \n", n);
			for (i = 0; i < n; i++)
				printf("%c", 'A' + topological_sequence[i]);
			printf(".\n");
		}
		else
			printf("Inconsistency found after 2 relations.\n");
	}

	return 0;
}
