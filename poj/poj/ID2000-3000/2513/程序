一道相当经典的题目，tire树+并查集+欧拉路。题意大概是：给定许多跟木棒，木棒两端都涂上颜色，求是否能将木棒首尾相接，连成一条直线，要求不同木棒相接的一边必须是相同颜色的。可以用图论中欧拉路的知识来解这道题，首先可以把木棒两端看成节点，把木棒看成边，这样的话，相同的颜色就是同一个节点，问题便转化为了，给定一个图，是否存在“一笔画”经过涂中每一点，以及经过每一边一次。这样就是求图中是否存在欧拉路了。

由图论知识可以知道，无向图存在欧拉路的充要条件为：①图是连通的；②所有节点的度为偶数，或者只有两个度为奇数的节点。

其中节点的度用颜色出现次数来统计，tire用来记录颜色，而并查集用来合并节点，判断图是否连通；

view plain

    #include<iostream>  
    #include<cstring>  
    using namespace std;  
    char clr1[11],clr2[11];     
    int p[500010];     
    int r[500010];     
    int rec[500010];     
    int num=1;    
    struct node  
    {  
        int id,i;  
        node*next[27];  
        node()  
        {  
            for(i=0;i<27;i++)  
                next[i]=NULL;  
            id=0;  
        }  
    };  
    node*root=new node;  
    void insert(char*temp)  
    {  
        int len=strlen(temp);  
        int i;  
        node*p=root;  
        for(i=0;i<len;i++)  
        {  
            if(p->next[temp[i]-'a']==NULL)  
                p->next[temp[i]-'a']=new node;  
            p=p->next[temp[i]-'a'];  
        }  
        if(p->id==0)  
            p->id=num++;  
    }  
    int search(char*temp)  
    {  
        node*p=root;  
        int i,len=strlen(temp);  
        for(i=0;i<len;i++)  
            p=p->next[temp[i]-'a'];  
        return p->id;  
    }  
    void make_set(int x)     
    {     
            p[x]=x;     
            r[x]=1;     
    }   
    int find_set(int x)  
    {  
        if(p[x]!=x)  
            p[x]=find_set(p[x]);  
        return p[x];  
    }  
    void Union(int x,int y)  
    {  
        if(r[x]>=r[y])  
        {  
            p[y]=x;  
            r[x]=r[x]+r[y];  
        }  
        else  
        {  
            p[x]=y;  
            r[y]=r[y]+r[x];  
        }  
    }  
    int main()  
    {  
        while(scanf("%s %s",clr1,clr2)!=EOF)  
        {  
            insert(clr1);  
            insert(clr2);  
            int x1=search(clr1);  
            int x2=search(clr2);  
            rec[x1]++;  
            rec[x2]++;  
            if(p[x1]==0)  
                make_set(x1);  
            if(p[x2]==0)  
                make_set(x2);  
            Union(find_set(x1),find_set(x2));  
        }  
        int i=0,sum=0;  
        for(i=1;i<num;i++)  
        {  
            if(rec[i]%2!=0)  
                sum++;  
            if(sum>2)  
            {  
                printf("Impossible/n");  
                return 0;  
            }  
        }  
        for(i=1;i<num;i++)  
        {  
            if(find_set(i)!=find_set(1))  
            {  
                printf("Impossible/n");  
                return 0;  
            }  
        }  
        printf("Possible/n");  
        return 0;  
    }  
